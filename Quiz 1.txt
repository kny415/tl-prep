Quiz 1

Exercises

What would you expect the code below to print out?

numbers = [1, 2, 2, 3]
numbers.uniq

puts numbers
Solution
1
2
2
3


Describe the difference between ! and ? in Ruby. And explain what would happen in the following scenarios: 
1. what is != and where should you use it?
2. put ! before something, like !user_name
3. put ! after something, like words.uniq!
4. put ? before something
5. put ? after something
6. put !! before something, like !!user_name

Solution
! usually modifies the argument, ? usually is a boolean test
!= is not equals, use it for testing


Replace the word "important" with "urgent" in this string:

advice = "Few things in life are as important as house training your pet dinosaur."
Solution
advice.gsub! 'important', 'urgent'


The Ruby Array class has several methods for removing items from the array. Two of them have very similar names. Let's see how they differ:

numbers = [1, 2, 3, 4, 5]
What would the following return?

numbers.delete_at(1)
numbers.delete(1)
Solution
numbers.delete_at(1) returns:
2
numbers.delete(1)
1

Programmatically determine if 42 lies between 10 and 100.

hint: Use Ruby's range object in your solution.

Solution
(10..100).include?(42)


Starting with the string:

famous_words = "and seven years ago..."
show two different ways to put the expected "Four score and " in front of it.

Solution
famous_words.prepend("Four score and  ")
famous_words = "Four score and " + famous_words


Fun with gsub:

def add_eight(number)
  number + 8
end

number = 2

how_deep = "number"
5.times { how_deep.gsub!("number", "add_eight(number)") }

p how_deep
This gives us a string that looks like a "recursive" method call:

"add_eight(add_eight(add_eight(add_eight(add_eight(number)))))"
If we take advantage of Ruby's Kernel#eval method to have it execute this string as if it were a "recursive" method call

eval(how_deep)
what will be the result?

Solution
42

If we build an array like this:

flintstones = ["Fred", "Wilma"]
flintstones << ["Barney", "Betty"]
flintstones << ["BamBam", "Pebbles"]
We will end up with this "nested" array:

["Fred", "Wilma", ["Barney", "Betty"], ["BamBam", "Pebbles"]]
Make this into an un-nested array.

Solution
flinstones.flatten!


Given the hash below

flintstones = { "Fred" => 0, "Wilma" => 1, "Barney" => 2, "Betty" => 3, "BamBam" => 4, "Pebbles" => 5 }
Turn this into an array containing only two elements: Barney's name and Barney's number

Solution
flintstones.assoc("Barney")

Given the array below

flintstones = ["Fred", "Barney", "Wilma", "Betty", "Pebbles", "BamBam"]
Turn this array into a hash where the names are the keys and the values are the positions in the array.

Solution
f_hash = Hash.new

flintstones.each_with_index do |val, index|
  f_hash[val] = index
  end